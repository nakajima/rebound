h1. rebound

By default, instances of UnboundMethod can only be bound to objects that
are a kind_of? the method's original class. Pretty lame.

rebound allows unbound methods (instances of UnboundMethod class) to be
bound to objects of any class. It uses the alias_method_chain pattern to
accomplish this, meaning you also get a bind_without_indifference method
that retains the original behavior.

"http://github.com/nakajima/rebound":http://github.com/nakajima/rebound

h3. USAGE

<pre>
class Guy
  def greet
    puts "Hello!"
  end
end

class Girl
  # No #greet method here
end

girl = Girl.new

m = Guy.instance_method(:greet)

m.bind(girl)

girl.greet # => Hello!
</pre>

h3. TODO:

* Could probably use some more specs, since I'm pretty sure I didn't think
  of everything.

h3. REQUIREMENTS:

* ParseTree
* Ruby2Ruby

h3. Credit

I'm just standing on "Ryan Davis'":http://www.zenspider.com shoulders with
this project. He did all the hard work. I just did something cool with it.
(Which isn't to say that what he did wasn't cool, since what he did is *way*
cooler than what you see here.)

Copyright (c) 2008 Pat Nakajima

  Permission is hereby granted, free of charge, to any person obtaining
  a copy of this software and associated documentation files (the
  'Software'), to deal in the Software without restriction, including
  without limitation the rights to use, copy, modify, merge, publish,
  distribute, sublicense, and/or sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to
  the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
  TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
